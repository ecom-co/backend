services:
    # API Server - Development Mode
    api:
        build:
            context: .
            dockerfile: Dockerfile
            target: dev
        container_name: ecom-api-dev
        env_file:
            - .env.docker
        volumes:
            - .:/app
            - /app/node_modules
        command: sh -c "npm install && npm run start:dev"
        ports:
            - '3012:3012'
            - '9230:9229' # Debug port
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
            elasticsearch:
                condition: service_healthy
        networks:
            - ecom-network
        healthcheck:
            test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3012/docs']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 60s

    # PostgreSQL Database
    postgres:
        image: postgres:16-alpine
        container_name: ecom-postgres
        restart: unless-stopped
        env_file:
            - .env.docker
        ports:
            - '5443:5432'
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./docker/postgres:/docker-entrypoint-initdb.d:ro
        networks:
            - ecom-network
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s

    # Redis Cache
    redis:
        image: redis:7-alpine
        container_name: ecom-redis
        restart: unless-stopped
        command: redis-server --appendonly yes
        ports:
            - '6390:6379'
        volumes:
            - redis_data:/data
        networks:
            - ecom-network
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 10s
            timeout: 3s
            retries: 5
            start_period: 10s

    # RabbitMQ
    rabbitmq:
        image: rabbitmq:4.1-management-alpine
        container_name: ecom-rabbitmq
        restart: unless-stopped
        env_file:
            - .env.docker
        ports:
            - '5683:5672'
            - '15683:15672'
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        networks:
            - ecom-network
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 30s
            timeout: 30s
            retries: 3
            start_period: 60s

    # Elasticsearch (for Kibana)
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
        container_name: ecom-elasticsearch
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=false
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - elasticsearch_data:/usr/share/elasticsearch/data
        ports:
            - '9201:9200'
        networks:
            - ecom-network
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:9200/_cluster/health']
            interval: 30s
            timeout: 10s
            retries: 5

    # Kibana
    kibana:
        image: docker.elastic.co/kibana/kibana:8.13.4
        container_name: ecom-kibana
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            - XPACK_SECURITY_ENABLED=false
        ports:
            - '5602:5601'
        depends_on:
            - elasticsearch
        networks:
            - ecom-network

    # PgAdmin - optional DB admin UI
    pgadmin:
        image: dpage/pgadmin4:latest
        container_name: ecom-pgadmin
        restart: unless-stopped
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
            PGADMIN_CONFIG_SERVER_MODE: 'False'
        ports:
            - '8081:80'
        volumes:
            - pgadmin_data:/var/lib/pgadmin
        networks:
            - ecom-network
        depends_on:
            - postgres

volumes:
    postgres_data:
        driver: local
    redis_data:
        driver: local
    rabbitmq_data:
        driver: local
    pgadmin_data:
        driver: local
    elasticsearch_data:
        driver: local

networks:
    ecom-network:
        driver: bridge
